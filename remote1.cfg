[transmogrifier]

pipeline =
    crawler
    cache
    typeguess
    template1
    template2
    template3
    template4
    templateauto
    indexguess
    sitemapper
    attachmentguess
    hideguess
    addfolders
    titleguess
    urltidy
    changetype
    saveall

nextline =

[saveall]
blueprint = transmogrify.webcrawler.serializer
@action = Should be save or restore
@directory = Destination/Source for above action
@debug = Debug mode

action = save
directory = var/pickles
debug = True

[crawler]
blueprint = transmogrify.webcrawler
@doc = Crawls site or cache for content
@url = URL: the top url to crawl
@start-urls = LIST: additional urls to crawl at the start
@ignore = LIST: list of regex for urls to not crawl
@cache = DIR: local directory to read crawled items from instead of accessing the site directly
@patterns = LIST: Regular expressions to substitute before html is parsed. New line seperated 
@subs = LIST: Text to replace each item in patterns. Must be the same number of lines as patterns 
@maxsize = BYTES: don't crawl anything larger than this
@max = INT: Limit crawling to this number of pages
@ignore_robots = BOOL: Ignore robots.txt for when you really want their content
@debug = show extra debug information
@nskip = INT: skip this many urls before starting the processing.
#
# see http://pypi.python.org/pypi/transmogrify.webcrawler
#

start-urls = 
    http://www.graines-de-paix.org/de/5_meilleurs_poemes_anglophones
old-urls =
    http://www.graines-de-paix.org/de/5_meilleurs_poemes_francophones
    http://www.graines-de-paix.org/en
    http://www.graines-de-paix.org/en/graines_de_paix_bienvenue
    http://www.graines-de-paix.org/en/graines_de_paix_bienvenue/telechargez_ici_nos_documents
url = http://www.graines-de-paix.org

ignore =
  cgi-bin
  javascript:
cache = ${cache:output}
ignore_robots = false

[cache]
blueprint = transmogrify.webcrawler.cache
#
@doc= Saves content to disk
# see http://pypi.python.org/pypi/transmogrify.webcrawler#cache
#
@output = DIR: relative directory to store cached downloads
@debug = show extra debug information
output = var/funnelwebcache/${crawler:url}/


[typeguess]
blueprint = transmogrify.webcrawler.typerecognitor
#
@doc = Sets Plone content type based on mime-type
# see http://pypi.python.org/pypi/transmogrify.webcrawler#TypeRecognitor
@condition = TAL: Tal expression returning boolean called for each 'item' 
@debug = show extra debug information

[drop]
blueprint = collective.transmogrifier.sections.condition
#
@doc = Useful to drop certain content
# see http://pypi.python.org/pypi/collective.transmogrifier/#condition-section
@condition = TAL: TAL expression returning boolean called for each 'item' 
@debug = show extra debug information
condition = python:item.get('_mimetype') not in ['application/x-javascript','text/css','text/plain','application/x-java-byte-code'] and item.get('_path','').split('.')[-1] not in ['class']

[template1]
blueprint = transmogrify.htmlcontentextractor
title       = text //div[@class='content-view-full']//h1[1]
_delete1    = optional //div[@class='content-view-full']//a[@class='headerlink']
_delete2    = optional //div[contains(@class,'admonition-description')]
description = text //div[@class='content-view-full']/descendant::p[1] | //title
text        = html //div[@class='content-view-full']

[template2]
blueprint = transmogrify.htmlcontentextractor
@doc = Used if no previous templates matched. see template1 for options
title       = text //div[@id='maincontent-design']//h1[1] | //title
text        = html //div[@id='maincontent-design']

[template3]
blueprint = transmogrify.htmlcontentextractor
@doc = Used if no previous templates matched. see template1 for options
#title       = text //div[@id='maincontent-design']//h1[1] | //title
#text        = html //div[@id='maincontent-design']//form

[template4]
blueprint = transmogrify.htmlcontentextractor
@doc = Used if no previous templates matched. see template1 for options

[templateauto]
blueprint = transmogrify.htmlcontentextractor.auto
@doc = Guesses XPaths of content by performing a cluster analysis of all the content not already matched 
# see http://pypi.python.org/pypi/transmogrify.htmlcontentextractor@auto
@condition = TAL: A TAL expression returning boolean called for each 'item'. Turned off by default.
@debug = show extra debug information
condition=python:False

[indexguess]
blueprint = transmogrify.siteanalyser.defaultpage
@doc = Determines an item is a default page for a container if it has many links
 to items in that container even if not contained in that folder 
# see http://pypi.python.org/pypi/transmogrify.siteanalyser#defaultpage
@condition = TAL: tal expression returning boolean called for each 'item' 
@default_pages = LIST: names that indication page should be a defaultpage
@debug = show extra debug information
@min_links = INT: If a page has this many links to a single folder's content it will be moved
@max_uplinks = INT: If a page has more than this many links parent folders then don't more it
condition=python:False
min_links = 2
max_uplinks = 2
default_pages =
    index.html
    index
    index-html
    index.asp
    index.php
default_containers = Folder

[sitemapper]
blueprint = transmogrify.siteanalyser.sitemapper
@doc = Uses a indented html with links in to rearrange those links in the site
@condition = TAL: Which item to use as the sitemap
@debug = show extra debug information
exclude-from-navigation-key = ${hideguess:key}
title-key = title

[attachmentguess]
blueprint = transmogrify.siteanalyser.attach
@doc = Finds items only referenced by one page and moves them into a new folder with the page as the default view
# see http://pypi.python.org/pypi/transmogrify.siteanalyser#makeattachments
#
@condition = TAL: TAL expression returning boolean called for each 'item' 
@debug = show extra debug information
@defaultpage = NAME: name to give created defaultpages
#condition = python: subitem.get('_type') in ['Image']
condition=python:False
defaultpage = index-html

[hideguess]
blueprint = transmogrify.siteanalyser.hidefromnav
@doc = Picks content which won't be shown in the site navigation
@condition = TAL: TAL expression to pick which items should be hidden
key = _exclude-from-navigation
condition = python:False 


[addfolders]
blueprint = transmogrify.siteanalyser.pathsorter
@default_containers = TYPE: Type to set when creating folders
@debug = show extra debug information
default_containers = Folder


[titleguess]
blueprint = transmogrify.siteanalyser.title
@doc = Tries to find better page titles by analysing backlink text
#  see http://pypi.python.org/pypi/transmogrify.siteanalyser#title
#
@condition = TAL: TAL expression returning boolean called for each 'item'
@debug = show extra debug information
@ignore = LIST: don't use backlink text containing these substrings
ignore =
	click
	read more
	more info
	http:
	file:
	img
ignore_re =
	\.\.\. *$
	\. \. \. *$
	^Close$
	^close$
condition=python:False

[urltidy]
blueprint = transmogrify.siteanalyser.urltidy
@doc = Applies title normalisation rules remove invalid chars from urls. It will also ensure all internal links are corrected
@debug = show extra debug information
@link_expr = TAL: TAL expression to set new value of the path
@use_title = TAL: TAL expression to switch id to use the title
@invalid_ids = Rename the reserved words by Plone
# see http://pypi.python.org/pypi/transmogrify.siteanalyser#relinker
#
link_expr = python:item['_path'].rsplit('.',1)[-1] in ['html','asp','php'] and item['_path'].rsplit('.',1)[0] or item['_path']
use_title = python:False
invalid_ids =
    view
    layout
    edit

[changetype]
blueprint = collective.transmogrifier.sections.inserter
@doc = Switch the type of the created object if desired
#
@value = TAL: TAL expression to give the new value for the Type of object.
key = string:_type
condition = python:item.get('_type')
value = python:item['_type']
