[transmogrifier]

pipeline = 
    restoreall
    ploneupload
    ploneupdate
    ploneportlets
    plonehide
    publish
    plonepublish
    plonealias

[restoreall]
blueprint = transmogrify.webcrawler.serializer
@action = Should be save or restore
@directory = Destination/Source for above action
@debug = Debug mode

action = restore
directory = var/pickles
debug = True

[ploneupload]
blueprint = transmogrify.ploneremote.remoteconstructor
@doc = Adds content to plone via xmlrpc
# see http://pypi.python.org/pypi/transmogrify.ploneremote#remoteconstructor
#
@target = URL: The base url for where all content should be created. Can support basic authentication
     e.g. target = http://admin:admin@localhost:8080/Plone
@debug = show extra debug information
type-key = _type
path-key = _path
creation-key = _creation_flag
target=http://admin:admin@localhost:8080/Plone
move-condition=python:False
remove-condition=python:False

[ploneupdate]
blueprint = transmogrify.ploneremote.remoteschemaupdater
@doc = Updates content of existing object on a remote plone site via xmlrpc
# see http://pypi.python.org/pypi/transmogrify.ploneremote#remoteschemaupdater
@target = URL: the base url for where all content should be updated. Can support basic authentication
@skip-unmodified = BOOLEAN: if true the modification date will be compared with that on server and updating skipped
@skip-fields = LIST: don't update these fields during update
@skip-existing = BOOLEAN: if creation-key is set then update, otherwise skip
@debug = show extra debug information
# e.g. target = http://admin:admin@localhost:8080/Plone
#
target = ${ploneupload:target}
condition = python:True
skip-existing = False
skip-unmodified = True
skip-fields =
creation-key = ${ploneupload:creation-key}
headers-key = _content_info
type-key = _type
path-key = _path



[ploneportlets]
blueprint = transmogrify.ploneremote.remoteportlets
@doc = Sets left and right portlets
# see http://pypi.python.org/pypi/transmogrify.ploneremote#remoteschemaupdater
@target = URL: the base url for where all content should be updated. Can support basic authentication
@debug = show extra debug information
# e.g. target = http://admin:admin@localhost:8080/Plone
#
target = ${ploneupload:target}
type-key = _type
path-key = _path
condition = python:True



[plonehide]
blueprint = transmogrify.ploneremote.remotenavigationexcluder
@doc = Hide items from the navigation
 (hints to which items should be hidden are set earlier in pipeline)
 by default it will hide items not linked to outside of any body text
# see http://pypi.python.org/pypi/transmogrify.ploneremote#remotenavigationexcluder
#
@debug = show extra debug information
target = ${ploneupload:target}
type-key = _type
path-key = _path
exclude-from-navigation-key = _exclude-from-navigation

[publish]
blueprint = collective.transmogrifier.sections.inserter
@doc = Set the workflow transition
#key hint which will be used publish the item.
# This value is later read by [plonepublish] and we can have conditions
# to have different WF transitions for different content types 
# Note that images do not have workflow and they inherit
# permission settings of the parent container
#
@value = TAL: TAL expression to return the transition to workflow
key = string:_transitions
value = python:["publish"]
condition = python:item.get('_type') != 'Image' and not options.get('disabled')

[plonepublish]
blueprint = transmogrify.ploneremote.remoteworkflowupdater
@doc= Publish or otherwise change the workflow state of remote plone content
# see http://pypi.python.org/pypi/transmogrify.ploneremote#remoteworkflowupdater
#
@debug = show extra debug information
transitions = submit publish
transitions-key = _transitions
target = ${ploneupload:target}
type-key = _type
path-key = _path

[plonealias]
blueprint = transmogrify.ploneremote.remoteredirector
@doc = Creates aliases for items that have moved
# see http://pypi.python.org/pypi/transmogrify.ploneremote#remoteredirector
#
target = ${ploneupload:target}
type-key = _type
path-key = _path
